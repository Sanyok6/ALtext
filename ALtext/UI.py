from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(629, 693)
		MainWindow.setWindowIcon(QtGui.QIcon('/home/alex/Programming/Qt/ALtext/img/favicon.ico'))
		MainWindow.setWindowIcon(QtGui.QIcon('./img/new_icon.png'))
		MainWindow.setWindowIcon(QtGui.QIcon('/home/alex/Programming/Qt/ALtext/img/main_icon.png'))

		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")
		self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
		self.verticalLayout.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout.setObjectName("verticalLayout")
		
		self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
		self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
		self.tabWidget.setTabsClosable(True)
		#self.tabWidget.setMovable(True)
		self.tabWidget.setObjectName("tabWidget")
		self.verticalLayout.addWidget(self.tabWidget)
		MainWindow.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(MainWindow)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 629, 23))
		self.menubar.setObjectName("menubar")
		self.menuFile = QtWidgets.QMenu(self.menubar)
		self.menuFile.setObjectName("menuFile")
		self.menubar.addAction(self.menuFile.menuAction())
		self.menuOptions = QtWidgets.QMenu(self.menubar)
		self.menuActions = QtWidgets.QMenu(self.menubar)
		self.menuTools = QtWidgets.QMenu(self.menubar)
		self.menubar.addAction(self.menuOptions.menuAction())
		self.menubar.addAction(self.menuActions.menuAction())
		self.menubar.addAction(self.menuTools.menuAction())

		MainWindow.setMenuBar(self.menubar)
		self.statusbar = QtWidgets.QStatusBar(MainWindow)
		self.statusbar.setObjectName("statusbar")
		MainWindow.setStatusBar(self.statusbar)
		
		self.actionSave = QtWidgets.QAction(MainWindow)
		self.actionNew = QtWidgets.QAction(MainWindow)
		self.actionOpen = QtWidgets.QAction(MainWindow)
		self.actionOpenDir = QtWidgets.QAction(MainWindow)
		
		self.actDarkMode = QtWidgets.QAction(MainWindow, checkable=True)
		self.actDarkMode.setStatusTip("Enable a dark theme for the editor")
		self.actDarkMode.setShortcut("Ctrl+Shift+D")
		self.actDarkMode.triggered.connect(lambda:self.dark_theme(self.actDarkMode.isChecked(),MainWindow))
		self.SyntaxHighlightState = QtWidgets.QAction(MainWindow, checkable=True, checked=True)
		self.SyntaxHighlightState.setStatusTip("Enable syntax hlighting")
		self.use_spaces = QtWidgets.QAction(MainWindow, checkable=True, checked=True)
		self.use_spaces.setStatusTip("When you press tab the editor inserts four spases instead of a tab (only defaults for newly opened files)")
		self.ShowFR = QtWidgets.QAction(MainWindow)
		self.actFind = QtWidgets.QAction(MainWindow)
		self.actFind.setStatusTip("Find text")
		self.actFind.setShortcut("Ctrl+F")
		self.menuActions.addAction(self.actFind)
		self.actRep = QtWidgets.QAction(MainWindow)
		self.actRep.setStatusTip("Find text then replace it with other text")
		self.actRep.setShortcut("Ctrl+R")
		self.menuActions.addAction(self.actRep)
		self.menuFile.addAction(self.actionSave)
		self.menuFile.addAction(self.actionOpen)
		self.menuFile.addAction(self.actionOpenDir)
		self.menuFile.addAction(self.actionNew)
		self.menuOptions.addAction(self.actDarkMode)
		self.menuOptions.addAction(self.SyntaxHighlightState)
		self.menuOptions.addAction(self.use_spaces)
		self.menuTools.addAction(self.ShowFR)

		self.actionSave.setShortcut("Ctrl+S")
		self.actionOpen.setShortcut("Ctrl+O")
		self.actionNew.setShortcut("Ctrl+N")

		self.actionOpenDir.setShortcut("Ctrl+Shift+O")
		self.actionOpenDir.setStatusTip("Open a directory (aka. folder)")
		self.actionOpen.setStatusTip("Open a file")
		self.actionSave.setStatusTip("Save currently opened file")		

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)

	def dark_theme(self,state,mw):
		palette = QtGui.QPalette()
		palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
		palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
		palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
		palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
		palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
		palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
		palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
		palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
		palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
		palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
		palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
		palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
		palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.white)
		mw.setPalette(palette)
		if not state:
			mw.setPalette(QtGui.QPalette())

	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "AL-text"))
		self.menuFile.setTitle(_translate("MainWindow", "File"))
		self.menuOptions.setTitle(_translate("MainWindow", "Options"))
		self.menuActions.setTitle(_translate("MainWindow", "Actions"))
		self.menuTools.setTitle(_translate("MainWindow", "Tools"))
		self.actFind.setText(_translate("MainWindow", "Find"))
		self.actRep.setText(_translate("MainWindow", "Replace"))
		self.actDarkMode.setText(_translate("MainWindow", "Dark Mode"))
		self.SyntaxHighlightState.setText(_translate("MainWindow", "Syntax Hilighting"))
		self.use_spaces.setText(_translate("MainWindow", "use four spaces instead of tab"))
		self.ShowFR.setText(_translate("MainWindow", "Find/Replace tool"))
		self.actionSave.setText(_translate("MainWindow", "Save"))
		self.actionOpen.setText(_translate("MainWindow", "Open"))
		self.actionNew.setText(_translate("MainWindow", "New"))
		self.actionOpenDir.setText(_translate("MainWindow", "Open Dir"))
		self.menuFile.setTitle(_translate("MainWindow", "File"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
